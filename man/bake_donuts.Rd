% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bake_donuts.R
\name{bake_donuts}
\alias{bake_donuts}
\title{Bake donuts}
\usage{
bake_donuts(
  x,
  var,
  totals = NULL,
  text = list(legend_title = "Region", legend_other = "Other region", legend_stay =
    "Home region", popup_residents = "Residents", popup_stay = "Staying", popup_other =
    "&nbsp;&nbsp;&nbsp;&nbsp;to other regions", popup_inflow = "From other regions",
    popup_outflow = "Leaving", popup_to = "&nbsp;&nbsp;&nbsp;&nbsp;", edge_to = "to",
    edge_flow = "Flow"),
  groupname = "Data",
  highlight = NULL,
  pal = c("blue", "grey70"),
  donut_size_min = NA,
  donut_size_max = NA,
  donut_scale = 1.5,
  flow_th = NA,
  flow_max = NA,
  flow_buffer = NA,
  flow_scale = 10,
  round_to = 1,
  edge_incoming = TRUE,
  popup_perc_totals = TRUE,
  popup_perc_items = FALSE,
  groups = list(),
  mute = NULL,
  legend = TRUE,
  group_label_show = FALSE,
  group_label_cex = 1,
  group_trunc_m = 2000,
  border = NULL,
  tm = NULL,
  title = NULL,
  basemaps = c("Esri.WorldGrayCanvas", "OpenStreetMap")
)
}
\arguments{
\item{x}{\code{\link[odf:od]{od}} object}

\item{var}{name of the variable in x$E that contain the flow values}

\item{totals}{total numbers of units per origin. If \code{NULL} (default) the totals are derived from \code{x}. This parameter is useful, because in some applications, the total may deviate because of rounding errors.}

\item{text}{list of text labels in the visualization. See default function call for required list items.}

\item{groupname}{Name of the group what will appear as layer in the interactive map.}

\item{highlight}{Name(s) of the regions  (origins or destinations) that will have a distinct color}

\item{pal}{color palette. It should have the length of \code{length(highlight) + 2}. The first color indicate the flows to elsewhere (except to hightlights), the second color indicates "stay", i.e. flows from A to A. The other colors are used for the regions in \code{highlight}.}

\item{donut_size_min, donut_size_max, donut_scale}{The values that determine the donut size (totals of \code{var} per origin) are truncated at \code{donut_size_min} and \code{donut_size_max}. Next, the value range \code{c(0, donut_size_max)} is mapped to the size range \code{c(0, donot_scale)}.}

\item{flow_th, }{Only flows of at least \code{flow_th} are shown.}

\item{flow_max, flow_buffer, flow_scale}{The values that determine the flows (specified with \code{var}) are truncated at \code{flow_max}. Next, \code{flow_buffer} is added to those values (to compensate for very thin lines). Next, the value range \code{c(0, flow_max)} is mapped to the size range \code{c(0, flow_scale)}. It is recommende to keep \code{flow_buffer} low, e.g. similar to \code{flow_th}.}

\item{round_to}{Rounding of the numbers of \code{x$E[[var]]} (useful in case these values are privacy sensitive). Use 1 to round to integers, 100 to round to hundreds, etc.}

\item{edge_incoming}{Should the edges to drawn from midpoint to destination (so incoming), by default \code{TRUE}, or from origin to midpoint (so outgoing)?}

\item{popup_perc_totals}{Should percentages be shown for totals in the popups?}

\item{popup_perc_items}{Should percentages be shown for the highlighted regions in the popups?}

\item{groups}{List of groups that specify grouping of nodes. Each item is a list that contains information for one group. The items should be: \code{codes}, a vector of codes of nodes to be grouped; \code{longlat}, the long/lat coordinates of the grouped node; \code{name}, the name of the grouped node; \code{code}, an arbitrary but unique code for the grouped node; \code{donut} logical indicating whether the donut for the grouped node should be shown; \code{inflow}, logical indicating whether the inflows for the grouped node should be shown; \code{outflow}, logical indicating whether the outflows for the grouped node should be shown.}

\item{mute}{List that specifies which codes are not shown. The items should be \code{codes}, a vector of codes of nodes to be muted; \code{donut} logical indicating whether the donut for the muted nodes should be shown; \code{inflow}, logical indicating whether the inflows for the muted nodes should be shown; \code{outflow}, logical indicating whether the outflows for the muted nodes should be shown.}

\item{legend}{Should the legend be shown?}

\item{group_label_show}{Should the group labels be printed in the map?}

\item{group_label_cex}{Text size of the group labels (in case \code{group_label_show})}

\item{group_trunc_m}{not used}

\item{border}{\code{sf} object with polygons which show the region borders}

\item{tm}{\code{tmap} element that can be used to stack donut maps}

\item{title}{\code{Title}}

\item{basemaps}{\code{Basemaps} See \code{\link[tmap:tm_basemap]{tm_basemap}}.}
}
\description{
Bake donuts
}
\examples{
library(odf)
library(donutmaps)
library(tmap)

data("NL_commuting")
data("NL_muni_point")

# Create odf object
x = od(NL_commuting, NL_muni_point, col_orig = "muni_from", col_dest = "muni_to", col_id = "id")

# Define color palette
CBS_pal = c("#d9328a", "#7d4791", "#da5914", "#53a31d", "#0581a2", "#B3B3B3")


# Bake tasty donuts (all commuting traffic)
# Edges are incoming by default
tm = bake_donuts(x,
    var = "value",
    groupname = "Netherlands",
    highlight = c("Amsterdam", "Rotterdam", "Den Haag", "Utrecht"),
    pal = CBS_pal,
    donut_size_min = 30000, donut_size_max = 400000,
    flow_th = 500, flow_max = 20000, flow_buffer = 500, flow_scale = 10,
    donut_scale = 1.75)

# The result is a tmap object, which can best be shown in "view mode"
tmap_mode("view")
tm

# Focus on outgoing edges
tm_out = bake_donuts(x,
    var = "value",
    groupname = "Netherlands",
    highlight = c("Amsterdam", "Rotterdam", "Den Haag", "Utrecht"),
    pal = CBS_pal,
    donut_size_min = 30000, donut_size_max = 400000,
    edge_incoming = FALSE,
    flow_th = 500, flow_max = 20000, flow_buffer = 500, flow_scale = 10,
    donut_scale = 1.75)
tm_out

# Only commute by train
x_train = x
x_train$E = x_train$E[x_train$E$mode == "train", ]

tm_train = bake_donuts(x_train,
    var = "value",
    groupname = "Netherlands",
    highlight = c("Amsterdam", "Rotterdam", "Den Haag", "Utrecht"),
    pal = CBS_pal,
    donut_size_min = 1000, donut_size_max = 20000,
    flow_th = 100, flow_max = 2000, flow_buffer = 100, flow_scale = 15,
    donut_scale = 1.75)
tm_train
}
